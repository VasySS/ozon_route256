syntax = "proto3";

package pvz;
option go_package = "pkg/pvz";

import "pvz/v1/auth.proto";
import "pvz/v1/order.proto";
import "pvz/v1/order_return.proto";

import "google/protobuf/empty.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
import "google/api/annotations.proto";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
    info: {
        title: "Пункт выдачи заказов";
        version: "1.0.0";
        description: "Сервис, позволяющий выдавать заказы и принимать возвраты";  
    };
    host: "localhost:7001";
    schemes: HTTP;
    consumes: "application/json";
    produces: "application/json";
    security_definitions: {
        security: {
            key: "api-token";
            value: {
                in: IN_HEADER;
                type: TYPE_API_KEY;
                name: "X-Api-Token";
                description: "API токен для авторизации";
            };
        }
    };
};

service PVZService {
    rpc CreateOrder (CreateOrderRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = { 
            post: "/api/v1/orders"
            body: "*" 
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "Создание заказа";
            description: "Создание нового заказа пользователя";
            security: {
                security_requirement: {
                    key: "api-token";
                    value: {};
                };
              };        
        };
    };

    rpc GiveOrders(GiveOrdersRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            patch: "/api/v1/orders"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "Выдача заказов";
            description: "Выдача заказов пользователю";
            security: {
                security_requirement: {
                    key: "api-token";
                    value: {};
                };
            };
        };
    };

    rpc GetOrders (GetOrdersRequest) returns (GetOrdersResponse) {
        option (google.api.http) = { get: "/api/v1/orders" };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "Получение списка заказов";
            description: "Получение списка заказов пользователя";
            security: {
                security_requirement: {
                  key: "api-token";
                  value: {};
                };
            };
        };
    };

    rpc CreateOrderReturn (CreateOrderReturnRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = { 
            post: "/api/v1/returns/{order_id}"
            body: "*" 
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "Создание возврата";
            description: "Создание нового возврата для заказа пользователя";
            security: {
                security_requirement: {
                    key: "api-token";
                    value: {};
                };
            };
        };
    };

    rpc GiveOrderToCourier (GiveOrderToCourierRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = { 
            patch: "/api/v1/returns/{order_id}"
            body: "*" 
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "Выдача возврата курьеру";
            description: "Выдача возвращённого пользователем заказа курьеру";
            security: {
                security_requirement: {
                    key: "api-token";
                    value: {};
                };
            };
        };
    };

    rpc GetOrderReturns (GetOrderReturnsRequest) returns (GetOrderReturnsResponse) {
        option (google.api.http) = { get: "/api/v1/returns" };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "Получение списка возвратов";
            description: "Список возвратов для заказов в ПВЗ";
            security: {
                security_requirement: {
                  key: "api-token";
                  value: {};
                };
            };
        };
    };
    
    rpc RegisterUser (RegisterRequest) returns (RegisterResponse) {
        option (google.api.http) = { post: "/api/v1/users" };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "Регистрация пользователя";
            description: "Выдача JWT токена для пользователя по ID";
        };
    };
}
