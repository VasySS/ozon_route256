// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: pvz/v1/order_return.proto

package pvz

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on OrderReturn with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *OrderReturn) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OrderReturn with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in OrderReturnMultiError, or
// nil if none found.
func (m *OrderReturn) ValidateAll() error {
	return m.validate(true)
}

func (m *OrderReturn) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for OrderId

	if len(errors) > 0 {
		return OrderReturnMultiError(errors)
	}

	return nil
}

// OrderReturnMultiError is an error wrapping multiple validation errors
// returned by OrderReturn.ValidateAll() if the designated constraints aren't met.
type OrderReturnMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OrderReturnMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OrderReturnMultiError) AllErrors() []error { return m }

// OrderReturnValidationError is the validation error returned by
// OrderReturn.Validate if the designated constraints aren't met.
type OrderReturnValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrderReturnValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrderReturnValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrderReturnValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrderReturnValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrderReturnValidationError) ErrorName() string { return "OrderReturnValidationError" }

// Error satisfies the builtin error interface
func (e OrderReturnValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrderReturn.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrderReturnValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrderReturnValidationError{}

// Validate checks the field values on CreateOrderReturnRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateOrderReturnRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateOrderReturnRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateOrderReturnRequestMultiError, or nil if none found.
func (m *CreateOrderReturnRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateOrderReturnRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for OrderId

	if len(errors) > 0 {
		return CreateOrderReturnRequestMultiError(errors)
	}

	return nil
}

// CreateOrderReturnRequestMultiError is an error wrapping multiple validation
// errors returned by CreateOrderReturnRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateOrderReturnRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateOrderReturnRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateOrderReturnRequestMultiError) AllErrors() []error { return m }

// CreateOrderReturnRequestValidationError is the validation error returned by
// CreateOrderReturnRequest.Validate if the designated constraints aren't met.
type CreateOrderReturnRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateOrderReturnRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateOrderReturnRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateOrderReturnRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateOrderReturnRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateOrderReturnRequestValidationError) ErrorName() string {
	return "CreateOrderReturnRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateOrderReturnRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateOrderReturnRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateOrderReturnRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateOrderReturnRequestValidationError{}

// Validate checks the field values on GiveOrderToCourierRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GiveOrderToCourierRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GiveOrderToCourierRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GiveOrderToCourierRequestMultiError, or nil if none found.
func (m *GiveOrderToCourierRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GiveOrderToCourierRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OrderId

	if len(errors) > 0 {
		return GiveOrderToCourierRequestMultiError(errors)
	}

	return nil
}

// GiveOrderToCourierRequestMultiError is an error wrapping multiple validation
// errors returned by GiveOrderToCourierRequest.ValidateAll() if the
// designated constraints aren't met.
type GiveOrderToCourierRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GiveOrderToCourierRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GiveOrderToCourierRequestMultiError) AllErrors() []error { return m }

// GiveOrderToCourierRequestValidationError is the validation error returned by
// GiveOrderToCourierRequest.Validate if the designated constraints aren't met.
type GiveOrderToCourierRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GiveOrderToCourierRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GiveOrderToCourierRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GiveOrderToCourierRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GiveOrderToCourierRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GiveOrderToCourierRequestValidationError) ErrorName() string {
	return "GiveOrderToCourierRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GiveOrderToCourierRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGiveOrderToCourierRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GiveOrderToCourierRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GiveOrderToCourierRequestValidationError{}

// Validate checks the field values on GetOrderReturnsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetOrderReturnsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOrderReturnsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetOrderReturnsRequestMultiError, or nil if none found.
func (m *GetOrderReturnsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOrderReturnsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPage() < 1 {
		err := GetOrderReturnsRequestValidationError{
			field:  "Page",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetPageSize() < 1 {
		err := GetOrderReturnsRequestValidationError{
			field:  "PageSize",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetOrderReturnsRequestMultiError(errors)
	}

	return nil
}

// GetOrderReturnsRequestMultiError is an error wrapping multiple validation
// errors returned by GetOrderReturnsRequest.ValidateAll() if the designated
// constraints aren't met.
type GetOrderReturnsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOrderReturnsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOrderReturnsRequestMultiError) AllErrors() []error { return m }

// GetOrderReturnsRequestValidationError is the validation error returned by
// GetOrderReturnsRequest.Validate if the designated constraints aren't met.
type GetOrderReturnsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOrderReturnsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOrderReturnsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOrderReturnsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOrderReturnsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOrderReturnsRequestValidationError) ErrorName() string {
	return "GetOrderReturnsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetOrderReturnsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOrderReturnsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOrderReturnsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOrderReturnsRequestValidationError{}

// Validate checks the field values on GetOrderReturnsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetOrderReturnsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOrderReturnsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetOrderReturnsResponseMultiError, or nil if none found.
func (m *GetOrderReturnsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOrderReturnsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetOrderReturns() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetOrderReturnsResponseValidationError{
						field:  fmt.Sprintf("OrderReturns[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetOrderReturnsResponseValidationError{
						field:  fmt.Sprintf("OrderReturns[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetOrderReturnsResponseValidationError{
					field:  fmt.Sprintf("OrderReturns[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetOrderReturnsResponseMultiError(errors)
	}

	return nil
}

// GetOrderReturnsResponseMultiError is an error wrapping multiple validation
// errors returned by GetOrderReturnsResponse.ValidateAll() if the designated
// constraints aren't met.
type GetOrderReturnsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOrderReturnsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOrderReturnsResponseMultiError) AllErrors() []error { return m }

// GetOrderReturnsResponseValidationError is the validation error returned by
// GetOrderReturnsResponse.Validate if the designated constraints aren't met.
type GetOrderReturnsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOrderReturnsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOrderReturnsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOrderReturnsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOrderReturnsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOrderReturnsResponseValidationError) ErrorName() string {
	return "GetOrderReturnsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetOrderReturnsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOrderReturnsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOrderReturnsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOrderReturnsResponseValidationError{}
