// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.2
// source: pvz/v1/pvz_service.proto

package pvz

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PVZService_CreateOrder_FullMethodName        = "/pvz.PVZService/CreateOrder"
	PVZService_GiveOrders_FullMethodName         = "/pvz.PVZService/GiveOrders"
	PVZService_GetOrders_FullMethodName          = "/pvz.PVZService/GetOrders"
	PVZService_CreateOrderReturn_FullMethodName  = "/pvz.PVZService/CreateOrderReturn"
	PVZService_GiveOrderToCourier_FullMethodName = "/pvz.PVZService/GiveOrderToCourier"
	PVZService_GetOrderReturns_FullMethodName    = "/pvz.PVZService/GetOrderReturns"
	PVZService_RegisterUser_FullMethodName       = "/pvz.PVZService/RegisterUser"
)

// PVZServiceClient is the client API for PVZService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PVZServiceClient interface {
	CreateOrder(ctx context.Context, in *CreateOrderRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GiveOrders(ctx context.Context, in *GiveOrdersRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetOrders(ctx context.Context, in *GetOrdersRequest, opts ...grpc.CallOption) (*GetOrdersResponse, error)
	CreateOrderReturn(ctx context.Context, in *CreateOrderReturnRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GiveOrderToCourier(ctx context.Context, in *GiveOrderToCourierRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetOrderReturns(ctx context.Context, in *GetOrderReturnsRequest, opts ...grpc.CallOption) (*GetOrderReturnsResponse, error)
	RegisterUser(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error)
}

type pVZServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPVZServiceClient(cc grpc.ClientConnInterface) PVZServiceClient {
	return &pVZServiceClient{cc}
}

func (c *pVZServiceClient) CreateOrder(ctx context.Context, in *CreateOrderRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, PVZService_CreateOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pVZServiceClient) GiveOrders(ctx context.Context, in *GiveOrdersRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, PVZService_GiveOrders_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pVZServiceClient) GetOrders(ctx context.Context, in *GetOrdersRequest, opts ...grpc.CallOption) (*GetOrdersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetOrdersResponse)
	err := c.cc.Invoke(ctx, PVZService_GetOrders_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pVZServiceClient) CreateOrderReturn(ctx context.Context, in *CreateOrderReturnRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, PVZService_CreateOrderReturn_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pVZServiceClient) GiveOrderToCourier(ctx context.Context, in *GiveOrderToCourierRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, PVZService_GiveOrderToCourier_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pVZServiceClient) GetOrderReturns(ctx context.Context, in *GetOrderReturnsRequest, opts ...grpc.CallOption) (*GetOrderReturnsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetOrderReturnsResponse)
	err := c.cc.Invoke(ctx, PVZService_GetOrderReturns_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pVZServiceClient) RegisterUser(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegisterResponse)
	err := c.cc.Invoke(ctx, PVZService_RegisterUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PVZServiceServer is the server API for PVZService service.
// All implementations must embed UnimplementedPVZServiceServer
// for forward compatibility.
type PVZServiceServer interface {
	CreateOrder(context.Context, *CreateOrderRequest) (*emptypb.Empty, error)
	GiveOrders(context.Context, *GiveOrdersRequest) (*emptypb.Empty, error)
	GetOrders(context.Context, *GetOrdersRequest) (*GetOrdersResponse, error)
	CreateOrderReturn(context.Context, *CreateOrderReturnRequest) (*emptypb.Empty, error)
	GiveOrderToCourier(context.Context, *GiveOrderToCourierRequest) (*emptypb.Empty, error)
	GetOrderReturns(context.Context, *GetOrderReturnsRequest) (*GetOrderReturnsResponse, error)
	RegisterUser(context.Context, *RegisterRequest) (*RegisterResponse, error)
	mustEmbedUnimplementedPVZServiceServer()
}

// UnimplementedPVZServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPVZServiceServer struct{}

func (UnimplementedPVZServiceServer) CreateOrder(context.Context, *CreateOrderRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrder not implemented")
}
func (UnimplementedPVZServiceServer) GiveOrders(context.Context, *GiveOrdersRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GiveOrders not implemented")
}
func (UnimplementedPVZServiceServer) GetOrders(context.Context, *GetOrdersRequest) (*GetOrdersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrders not implemented")
}
func (UnimplementedPVZServiceServer) CreateOrderReturn(context.Context, *CreateOrderReturnRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrderReturn not implemented")
}
func (UnimplementedPVZServiceServer) GiveOrderToCourier(context.Context, *GiveOrderToCourierRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GiveOrderToCourier not implemented")
}
func (UnimplementedPVZServiceServer) GetOrderReturns(context.Context, *GetOrderReturnsRequest) (*GetOrderReturnsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrderReturns not implemented")
}
func (UnimplementedPVZServiceServer) RegisterUser(context.Context, *RegisterRequest) (*RegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterUser not implemented")
}
func (UnimplementedPVZServiceServer) mustEmbedUnimplementedPVZServiceServer() {}
func (UnimplementedPVZServiceServer) testEmbeddedByValue()                    {}

// UnsafePVZServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PVZServiceServer will
// result in compilation errors.
type UnsafePVZServiceServer interface {
	mustEmbedUnimplementedPVZServiceServer()
}

func RegisterPVZServiceServer(s grpc.ServiceRegistrar, srv PVZServiceServer) {
	// If the following call pancis, it indicates UnimplementedPVZServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PVZService_ServiceDesc, srv)
}

func _PVZService_CreateOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PVZServiceServer).CreateOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PVZService_CreateOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PVZServiceServer).CreateOrder(ctx, req.(*CreateOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PVZService_GiveOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GiveOrdersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PVZServiceServer).GiveOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PVZService_GiveOrders_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PVZServiceServer).GiveOrders(ctx, req.(*GiveOrdersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PVZService_GetOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrdersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PVZServiceServer).GetOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PVZService_GetOrders_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PVZServiceServer).GetOrders(ctx, req.(*GetOrdersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PVZService_CreateOrderReturn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrderReturnRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PVZServiceServer).CreateOrderReturn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PVZService_CreateOrderReturn_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PVZServiceServer).CreateOrderReturn(ctx, req.(*CreateOrderReturnRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PVZService_GiveOrderToCourier_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GiveOrderToCourierRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PVZServiceServer).GiveOrderToCourier(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PVZService_GiveOrderToCourier_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PVZServiceServer).GiveOrderToCourier(ctx, req.(*GiveOrderToCourierRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PVZService_GetOrderReturns_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrderReturnsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PVZServiceServer).GetOrderReturns(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PVZService_GetOrderReturns_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PVZServiceServer).GetOrderReturns(ctx, req.(*GetOrderReturnsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PVZService_RegisterUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PVZServiceServer).RegisterUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PVZService_RegisterUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PVZServiceServer).RegisterUser(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PVZService_ServiceDesc is the grpc.ServiceDesc for PVZService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PVZService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pvz.PVZService",
	HandlerType: (*PVZServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateOrder",
			Handler:    _PVZService_CreateOrder_Handler,
		},
		{
			MethodName: "GiveOrders",
			Handler:    _PVZService_GiveOrders_Handler,
		},
		{
			MethodName: "GetOrders",
			Handler:    _PVZService_GetOrders_Handler,
		},
		{
			MethodName: "CreateOrderReturn",
			Handler:    _PVZService_CreateOrderReturn_Handler,
		},
		{
			MethodName: "GiveOrderToCourier",
			Handler:    _PVZService_GiveOrderToCourier_Handler,
		},
		{
			MethodName: "GetOrderReturns",
			Handler:    _PVZService_GetOrderReturns_Handler,
		},
		{
			MethodName: "RegisterUser",
			Handler:    _PVZService_RegisterUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pvz/v1/pvz_service.proto",
}
